/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Airplanes;
import Business.AirplanesCatalog;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vikram
 */
public class ViewJPanel extends javax.swing.JPanel {

    
    private AirplanesCatalog airplanesCatalog;
    /**
     * Creates new form ViewJPanel
     */
    public ViewJPanel(AirplanesCatalog airplanesCatalog) {
        initComponents();
        this.airplanesCatalog = airplanesCatalog;
        singleSearchPanel.setVisible(false);
        searchTablePanel.setVisible(false);
        manufacturerTblPanel.setVisible(false);
        seatSearchPanel.setVisible(false);
        //textPanel.setVisible(false);
       //populateTable();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seatSearchPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        maxSeatsTxtField = new javax.swing.JTextField();
        minSeatsTxtField = new javax.swing.JTextField();
        seatSearchBtn = new javax.swing.JButton();
        singleSearchPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        searchTxtField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        searchComboBox = new javax.swing.JComboBox<>();
        searchTablePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        searchAirlinesTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        manufacturerTblPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        manufacturerTbl = new javax.swing.JTable();

        setLayout(null);

        seatSearchPanel.setLayout(null);

        jLabel9.setText("Minimum Seats");
        seatSearchPanel.add(jLabel9);
        jLabel9.setBounds(0, 10, 110, 30);

        jLabel10.setText("Maximum Seats");
        seatSearchPanel.add(jLabel10);
        jLabel10.setBounds(0, 50, 100, 30);
        seatSearchPanel.add(maxSeatsTxtField);
        maxSeatsTxtField.setBounds(120, 50, 140, 30);
        seatSearchPanel.add(minSeatsTxtField);
        minSeatsTxtField.setBounds(120, 10, 140, 30);

        seatSearchBtn.setText("Search");
        seatSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seatSearchBtnActionPerformed(evt);
            }
        });
        seatSearchPanel.add(seatSearchBtn);
        seatSearchBtn.setBounds(280, 30, 90, 30);

        add(seatSearchPanel);
        seatSearchPanel.setBounds(500, 230, 400, 100);

        singleSearchPanel.setLayout(null);

        jLabel11.setText("Enter the Search ");
        singleSearchPanel.add(jLabel11);
        jLabel11.setBounds(10, 10, 100, 30);

        searchTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTxtFieldActionPerformed(evt);
            }
        });
        singleSearchPanel.add(searchTxtField);
        searchTxtField.setBounds(120, 10, 140, 30);

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        singleSearchPanel.add(searchBtn);
        searchBtn.setBounds(140, 50, 80, 30);

        add(singleSearchPanel);
        singleSearchPanel.setBounds(90, 220, 280, 100);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Select an option to make a search");
        add(jLabel2);
        jLabel2.setBounds(170, 160, 220, 30);

        searchComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "First Available Flight", "Flights Currently Available", "Flights Manufactured by Boeing", "Flights Manufactured in Year", "Flights with min and max seats", "Search by Serial No", "Search by Model No", "List of all Manufacturers", "Last updated fleet catalog", "List of Airplanes available at an Airport", "List of Airplanes that have expired Maitainence Certificates" }));
        searchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboBoxActionPerformed(evt);
            }
        });
        add(searchComboBox);
        searchComboBox.setBounds(420, 160, 490, 30);

        searchTablePanel.setLayout(null);

        searchAirlinesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial No", "Model No", "Manufactured By", "Year of Manufacture", "No. of seats", "Maintainence Certificate", "Airport", "Departure Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(searchAirlinesTable);

        searchTablePanel.add(jScrollPane3);
        jScrollPane3.setBounds(20, 10, 1110, 170);
        searchTablePanel.add(jScrollPane2);
        jScrollPane2.setBounds(220, 52, 30, 0);

        add(searchTablePanel);
        searchTablePanel.setBounds(10, 340, 1190, 200);

        jLabel1.setFont(new java.awt.Font("Georgia", 3, 24)); // NOI18N
        jLabel1.setText("Search Airline Details");
        add(jLabel1);
        jLabel1.setBounds(340, 40, 290, 60);

        manufacturerTblPanel.setLayout(null);

        manufacturerTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial No", "Manufacturer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(manufacturerTbl);

        manufacturerTblPanel.add(jScrollPane1);
        jScrollPane1.setBounds(70, 30, 800, 130);

        add(manufacturerTblPanel);
        manufacturerTblPanel.setBounds(30, 540, 1020, 180);
    }// </editor-fold>//GEN-END:initComponents

    private void searchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboBoxActionPerformed
        // TODO add your handling code here:
        //searchTablePanel.setVisible(false);
        ArrayList<Airplanes> air = airplanesCatalog.getAirplanesCatalog();
        SimpleDateFormat date = new SimpleDateFormat("dd-mm-yyyy");
        //singleSearchPanel.setVisible(false);
        //seatSearchPanel.setVisible(false);
        if (searchComboBox.getSelectedItem().toString() == "Flights Manufactured in Year"|| searchComboBox.getSelectedItem().toString() == "Search by Serial No" || searchComboBox.getSelectedItem().toString() == "List of Airplanes available at an Airport") {
            singleSearchPanel.setVisible(true);
        }

        if (searchComboBox.getSelectedItem().toString() == "First Available Flight") {
            searchTablePanel.setVisible(true);
            Collections.sort(air, new Comparator<Airplanes>() {
                public int compare(Airplanes a1, Airplanes a2) {
                    return a1.getDepartureDate().compareTo(a2.getDepartureDate());
                }
            });
            DefaultTableModel dtm = (DefaultTableModel)searchAirlinesTable.getModel();
            dtm.setRowCount(0);
            Object row[]= new Object[8];
            row[0] = air.get(0).getSerialNo();
            row[1] = air.get(0).getModelNo();
            row[2] = air.get(0).getManufacturer();
            row[3] = air.get(0).getYearOfManufacture();
            row[4] = air.get(0).getNumberOfSeats();
            row[5] = air.get(0).getMaintaineneceCertificate();
            row[6] = air.get(0).getAirport();
            String availDate = date.format(air.get(0).getDepartureDate());
            row[7] = availDate;
            dtm.addRow(row);
            
        }
        
        if (searchComboBox.getSelectedItem().toString() == "List of Airplanes that have expired Maitainence Certificates") {
           
            searchTablePanel.setVisible(true);
            for (int i = 0; i < air.size(); i++) {
                if (air.get(i).getMaintaineneceCertificate().equals("expired")){
                    DefaultTableModel dtm = (DefaultTableModel)searchAirlinesTable.getModel();
                    dtm.setRowCount(0);
                    Object row[]= new Object[8];
                    row[0]=air.get(i).getSerialNo();
                    row[1] = air.get(i).getModelNo();
                    row[2] = air.get(i).getManufacturer();
                    row[3] = air.get(i).getYearOfManufacture();
                    row[4] = air.get(i).getNumberOfSeats();
                    row[5] = air.get(i).getMaintaineneceCertificate();
                    row[6] = air.get(i).getAirport();
                    String availDate = date.format(air.get(i).getDepartureDate());
                    row[7] = availDate;
                    dtm.addRow(row);
                }
            }
        }
        
        if (searchComboBox.getSelectedItem().toString() == "Flights Currently Available") {
            
            searchTablePanel.setVisible(true);
            Collections.sort(air, new Comparator<Airplanes>() {
                public int compare(Airplanes a1, Airplanes a2) {
                    return a1.getDepartureDate().compareTo(a2.getDepartureDate());
                }
            });
            DefaultTableModel dtm = (DefaultTableModel)searchAirlinesTable.getModel();
            dtm.setRowCount(0);            
            for (int i = 0; i < air.size(); i++) {
                Object row[]= new Object[8];
                row[0]=air.get(i).getSerialNo();
                row[1] = air.get(i).getModelNo();
                row[2] = air.get(i).getManufacturer();
                row[3] = air.get(i).getYearOfManufacture();
                row[4] = air.get(i).getNumberOfSeats();
                row[5] = air.get(i).getMaintaineneceCertificate();
                row[6] = air.get(i).getAirport();
                String availDate = date.format(air.get(i).getDepartureDate());
                row[7] = availDate;
                dtm.addRow(row);
            }
        }
        
        
        
        if (searchComboBox.getSelectedItem().toString() == "Last updated fleet catalog") {
            searchTablePanel.setVisible(true);
            Collections.sort(air, new Comparator<Airplanes>() {
                public int compare(Airplanes a1, Airplanes a2) {
                    return a1.getDepartureDate().compareTo(a2.getCatalogUpdatedDate());
                }
            });
            DefaultTableModel dtm = (DefaultTableModel)searchAirlinesTable.getModel();
            dtm.setRowCount(0);
            Object row[]= new Object[9];
            row[0] = air.get(0).getSerialNo();
            row[1] = air.get(0).getModelNo();
            row[2] = air.get(0).getManufacturer();
            row[3] = air.get(0).getYearOfManufacture();
            row[4] = air.get(0).getNumberOfSeats();
            row[5] = air.get(0).getMaintaineneceCertificate();
            row[6] = air.get(0).getAirport();
            String availDate = date.format(air.get(0).getDepartureDate());
            row[7] = availDate;
            row[8] = air.get(0).getCatalogUpdatedDate();
            dtm.addRow(row);
            
        }
        

        if (searchComboBox.getSelectedItem().toString() == "Flights Manufactured by Boeing") {
            
            searchTablePanel.setVisible(true);
            DefaultTableModel dtm = (DefaultTableModel)searchAirlinesTable.getModel();
            dtm.setRowCount(0);
            for (int i = 0; i < air.size(); i++) {
                if (air.get(i).getManufacturer().equals("Boeing")){
                    
                    Object row[]= new Object[8];
                    row[0]=air.get(i).getSerialNo();
                    row[1] = air.get(i).getModelNo();
                    row[2] = air.get(i).getManufacturer();
                    row[3] = air.get(i).getYearOfManufacture();
                    row[4] = air.get(i).getNumberOfSeats();
                    row[5] = air.get(i).getMaintaineneceCertificate();
                    row[6] = air.get(i).getAirport();
                    String availDate = date.format(air.get(i).getDepartureDate());
                    row[7] = availDate;
                    dtm.addRow(row);
                }
            }
        }
        
        if (searchComboBox.getSelectedItem().toString() == "List of all Manufacturers") {
            manufacturerTblPanel.setVisible(true);
            int count = 0;
            ArrayList<String> manufacturers = new ArrayList<>();
            DefaultTableModel manufacturersTbl = (DefaultTableModel)manufacturerTbl.getModel();
            for (int i = 0; i < air.size(); i++) {
                if (manufacturers.contains(air.get(i).getManufacturer())) {
                    continue;
                }
                else{
                    manufacturers.add(air.get(i).getManufacturer());
                    count++;
                    manufacturersTbl.setRowCount(0);
                    Object row[]= new Object[2];
                    row[0] = count;
                    row[1] = air.get(i).getManufacturer() ;
                    manufacturersTbl.addRow(row);
                }             
            }
        }
        
        if (searchComboBox.getSelectedItem().toString() == "Flights with min and max seats") {
            seatSearchPanel.setVisible(true);
            singleSearchPanel.setVisible(false);
        }
        //Last updated fleet catalog
    }//GEN-LAST:event_searchComboBoxActionPerformed

    private void searchTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTxtFieldActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat date = new SimpleDateFormat("dd-mm-yyyy");
        ArrayList<Airplanes> air = airplanesCatalog.getAirplanesCatalog();
        DefaultTableModel dtm = (DefaultTableModel)searchAirlinesTable.getModel();
        dtm.setRowCount(0);
        if (searchComboBox.getSelectedItem().toString() == "Flights Manufactured in Year") {
            singleSearchPanel.setVisible(true);
            //ArrayList<Airplanes> air = airplanesCatalog.getAirplanesCatalog();
            for (int i = 0; i < air.size(); i++) {
                if (Integer.parseInt(searchTxtField.getText()) == air.get(i).getYearOfManufacture()) {
                    Object row[]= new Object[8];
                    row[0]=air.get(i).getSerialNo();
                    row[1] = air.get(i).getModelNo();
                    row[2] = air.get(i).getManufacturer();
                    row[3] = air.get(i).getYearOfManufacture();
                    row[4] = air.get(i).getNumberOfSeats();
                    row[5] = air.get(i).getMaintaineneceCertificate();
                    row[6] = air.get(i).getAirport();
                    String availDate = date.format(air.get(i).getDepartureDate());
                    row[7] = availDate;
                    dtm.addRow(row);
                }
                //System.out.println(air.get(i).getAirport());
            }
        }

        if (searchComboBox.getSelectedItem().toString() == "Search by Serial No") {
            singleSearchPanel.setVisible(true);
            seatSearchPanel.setVisible(false);
            Object row[]= new Object[8];
            //ArrayList<Airplanes> air = airplanesCatalog.getAirplanesCatalog();
            for (int i = 0; i < air.size(); i++) {
                if (searchTxtField.getText().equals(air.get(i).getSerialNo())) {
                    row[0]=air.get(i).getSerialNo();
                    row[1] = air.get(i).getModelNo();
                    row[2] = air.get(i).getManufacturer();
                    row[3] = air.get(i).getYearOfManufacture();
                    row[4] = air.get(i).getNumberOfSeats();
                    row[5] = air.get(i).getMaintaineneceCertificate();
                    row[6] = air.get(i).getAirport();
                    String availDate = date.format(air.get(i).getDepartureDate());
                    row[7] = availDate;
                }
            }
            dtm.addRow(row);
        }

        if (searchComboBox.getSelectedItem().toString() == "Search by Model No") {
            singleSearchPanel.setVisible(true);
            seatSearchPanel.setVisible(false);
            Object row[]= new Object[8];
            //ArrayList<Airplanes> air = airplanesCatalog.getAirplanesCatalog();
            for (int i = 0; i < air.size(); i++) {
                if (searchTxtField.getText().equals(air.get(i).getModelNo())) {
                    row[0]=air.get(i).getSerialNo();
                    row[1] = air.get(i).getModelNo();
                    row[2] = air.get(i).getManufacturer();
                    row[3] = air.get(i).getYearOfManufacture();
                    row[4] = air.get(i).getNumberOfSeats();
                    row[5] = air.get(i).getMaintaineneceCertificate();
                    row[6] = air.get(i).getAirport();
                    String availDate = date.format(air.get(i).getDepartureDate());
                    row[7] = availDate;
                    dtm.addRow(row);
                }
            }
            
        }

        if (searchComboBox.getSelectedItem().toString() == "List of all Manufacturers") {
            System.out.println("check");
        }

        if (searchComboBox.getSelectedItem().toString() == "List of Airplanes available at an Airport") {
            singleSearchPanel.setVisible(true);
            searchTablePanel.setVisible(true);
            Object row[]= new Object[8];
            //ArrayList<Airplanes> air = airplanesCatalog.getAirplanesCatalog();
            for (int i = 0; i < air.size(); i++) {
                if (searchTxtField.getText().equals(air.get(i).getAirport())) {
                    row[0]=air.get(i).getSerialNo();
                    row[1] = air.get(i).getModelNo();
                    row[2] = air.get(i).getManufacturer();
                    row[3] = air.get(i).getYearOfManufacture();
                    row[4] = air.get(i).getNumberOfSeats();
                    row[5] = air.get(i).getMaintaineneceCertificate();
                    row[6] = air.get(i).getAirport();
                    String availDate = date.format(air.get(i).getDepartureDate());
                    row[7] = availDate;
                    dtm.addRow(row);
                }
                
            }

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void seatSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seatSearchBtnActionPerformed
        // TODO add your handling code here:
        ArrayList<Airplanes> air = airplanesCatalog.getAirplanesCatalog();
        DefaultTableModel dtm = (DefaultTableModel)searchAirlinesTable.getModel();
        SimpleDateFormat date = new SimpleDateFormat("dd-mm-yyyy");
        dtm.setRowCount(0);
        if (searchComboBox.getSelectedItem().toString() == "Flights with min and max seats") {
            seatSearchPanel.setVisible(true);
            singleSearchPanel.setVisible(false);
            Object row[]= new Object[8];
            for (int i = 0; i < air.size(); i++) {
                if ((Integer.parseInt(minSeatsTxtField.getText()) < air.get(i).getNumberOfSeats()) && (air.get(i).getNumberOfSeats()>Integer.parseInt(maxSeatsTxtField.getText()))) {
                    //DefaultTableModel dtm = (DefaultTableModel)searchAirlinesTable.getModel();
                    row[0]=air.get(i).getSerialNo();
                    row[1] = air.get(i).getModelNo();
                    row[2] = air.get(i).getManufacturer();
                    row[3] = air.get(i).getYearOfManufacture();
                    row[4] = air.get(i).getNumberOfSeats();
                    row[5] = air.get(i).getMaintaineneceCertificate();
                    row[6] = air.get(i).getAirport();
                    String availDate = date.format(air.get(i).getDepartureDate());
                    row[7] = availDate;
                    dtm.addRow(row);
                }
                //System.out.println(air.get(i).getAirport());
            }
        }
    }//GEN-LAST:event_seatSearchBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable manufacturerTbl;
    private javax.swing.JPanel manufacturerTblPanel;
    private javax.swing.JTextField maxSeatsTxtField;
    private javax.swing.JTextField minSeatsTxtField;
    private javax.swing.JTable searchAirlinesTable;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JPanel searchTablePanel;
    private javax.swing.JTextField searchTxtField;
    private javax.swing.JButton seatSearchBtn;
    private javax.swing.JPanel seatSearchPanel;
    private javax.swing.JPanel singleSearchPanel;
    // End of variables declaration//GEN-END:variables
}
