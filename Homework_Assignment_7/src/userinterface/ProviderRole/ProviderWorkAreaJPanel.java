/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ProviderRole;

import userinterface.CDCOrderADRole.*;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.ProviderEnterprise;
import Business.Network.Network;
import Business.Organization.ProviderOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Vaccine.Vaccine;
import Business.WorkQueue.VaccineWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vikram
 */
public class ProviderWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Organization organization;
    Network network;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public ProviderWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business,Network network) {
        initComponents();
        
        this.network = network;
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.organization = (ProviderOrganization)organization;
        
        refreshTable();
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        for(Enterprise en: network.getEnterpriseDirectory().getEnterpriseList()){
//WorkRequest request : organization.getWorkQueue().getWorkRequestList()
                if(en instanceof ProviderEnterprise){
                    for(WorkRequest request : en.getWorkQueue().getWorkRequestList()){
                        Object[] row = new Object[4];
                        row[0] = request;
                        row[1] = request.getQuantity();
                        row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                        row[3] = request.getStatus();
            
                model.addRow(row);
            }
            break;
        }   
    }
    }
    
    public void refreshTable() {
        int rowCount = tblVaccine.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tblVaccine.getModel();
        model.setRowCount(0);
        for(Vaccine v : organization.getVaccineCatalog().getVaccineList() ) {
            Object row[] = new Object[4];
            row[0] = v;
            row[1] = v.getVaccineId();
            row[2] = v.getDiseaseName();
            row[3] = v.getAvailQuantity();
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        inventoryJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVaccine = new javax.swing.JTable();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine Name", "Quantity", "Sender", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 375, 96));

        assignJButton.setText("PROCESS");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, 120, 30));

        inventoryJButton.setText("Inventory");
        inventoryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryJButtonActionPerformed(evt);
            }
        });
        add(inventoryJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 70, 90, 30));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 30, 90, 30));

        tblVaccine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Vaccine Name", "Vaccine ID", "Disease", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblVaccine);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, 570, 110));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        for (Vaccine v: organization.getVaccineCatalog().getVaccineList()) {
            if (v.getVaccineName().equals(request.getVaacineName())) {
                if (v.getAvailQuantity() >= request.getQuantity()) {
                    int qu = v.getAvailQuantity() - request.getQuantity();
                    v.setAvailQuantity(qu);
                    request.setStatus("Vaccine supplied");
                    JOptionPane.showMessageDialog(null, "Request Approved");
                    break;
                }
                else{
                    JOptionPane.showMessageDialog(null, "Sufficient quantity not available");
                    request.setStatus("Pending");
                    break;
                }
            }
            else{
                 JOptionPane.showMessageDialog(null, "Vaccine not available, create vaccine");
                 request.setStatus("Pending");
                 break;
            }
        }
        populateTable();
        refreshTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void inventoryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryJButtonActionPerformed
        
        //WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
     
        //request.setStatus("Processing");
        
        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, business,network,organization);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_inventoryJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
        refreshTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton inventoryJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable tblVaccine;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
