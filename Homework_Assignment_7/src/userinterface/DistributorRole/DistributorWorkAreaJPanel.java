/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DistributorRole;

import userinterface.CDCOrderADRole.*;
import Business.EcoSystem;
import Business.Enterprise.ClinicEnterprise;
import Business.Enterprise.DistributorEnterprise;
import Business.Network.Network;
import Business.Organization.DistributorOrganization;
import Business.Organization.ProviderOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.VaccineWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Business.Enterprise.Enterprise;
import Business.Enterprise.ProviderEnterprise;
import javax.swing.JOptionPane;

/**
 *
 * @author raunak
 */
public class DistributorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Organization organization;
    Network network;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DistributorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business,Network network) {
        initComponents();
        
        this.network = network;
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.organization = (DistributorOrganization) organization;
        
        populateTable();
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(Enterprise en: network.getEnterpriseDirectory().getEnterpriseList()){//WorkRequest request : organization.getWorkQueue().getWorkRequestList()
            if (en instanceof DistributorEnterprise) {
            for(WorkRequest request : en.getWorkQueue().getWorkRequestList()){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getQuantity();
                row[2] = request.getSender().getEmployee().getName();
                row[3] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[4] = request.getStatus();
            
            model.addRow(row);
        }
            break;
            }
    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Vaccine Name", "Quantity", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 410, 96));

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 200, 100, 30));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 80, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select a row");
            return;
        }
        
        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
     
        //request.setStatus("Processing");
        
        Enterprise ent = null;
        if (request.getStatus().equalsIgnoreCase("Vaccine Supplied")) {
            request.setStatus("Vaccine available");
            JOptionPane.showMessageDialog(null, "Sent to clinic");
//            for (Enterprise en: network.getEnterpriseDirectory().getEnterpriseList()) {
//            if (en instanceof ClinicEnterprise){
//                ent = en;
//                    break;
//                }  
//            }
//                if (ent!=null){
//                    request.setStatus("Sent to Provider");
//                    JOptionPane.showMessageDialog(null, "Request Sent");
//            ent.getWorkQueue().getWorkRequestList().add(request); 
//        }
        }
        else{
        for (Enterprise en: network.getEnterpriseDirectory().getEnterpriseList()) {
            if (en instanceof ProviderEnterprise){
                ent = en;
                    break;
                }  
            }
                if (ent!=null){
                    request.setStatus("Sent to Provider");
                    JOptionPane.showMessageDialog(null, "Request Sent");
            ent.getWorkQueue().getWorkRequestList().add(request); 
        }
        }
   // }
        
//        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request,business,network, organization);
//        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
