/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdminRole.ManageCustomers;

import Business.Customers.Customer;
import Business.Customers.CustomerDirectory;
import Business.Markets.MarketList;
import Business.UserAccounts.UserAccount;
import Business.UserAccounts.UserAccountDirectory;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

import Business.UserAccounts.UserAccount;
import java.awt.CardLayout;
import java.util.ConcurrentModificationException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Varun
 */
public class ManageCustomersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCustomersJPanel
     */
    JPanel userProcessContainer;
    CustomerDirectory customerDirectory;
    UserAccountDirectory userAccountDirectory;
    MarketList marketList;
    public ManageCustomersJPanel(JPanel userProcessContainer,CustomerDirectory customerDirectory, UserAccountDirectory userAccountDirectory, MarketList marketList) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this. customerDirectory = customerDirectory;
        this.userAccountDirectory = userAccountDirectory;
        this. marketList = marketList;
        populateData();
    }
    public void populateData(){
        
        DefaultTableModel dtm = (DefaultTableModel)customerListJTable.getModel();
        dtm.setRowCount(0);
        for(Customer customer: customerDirectory.getCustomerList()){
            Object row[] = new Object[4];
            row[0] = customer;
            row[2] = customer.getCustomerId();
            row[3] = customer.getMarket().toString();
            for(UserAccount user : userAccountDirectory.getUserList()){
                if(user.getRole().equals("Customer")){
                if (user.getCustomer().equals(customer)){
                row[1] = user;
            } 
            }
            }
            
            dtm.addRow(row);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerListJTable = new javax.swing.JTable();
        addNewCustomerJButton = new javax.swing.JButton();
        viewCustomerJButton = new javax.swing.JButton();
        deleteUserJButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Customers");

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        customerListJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Username", "Customer Id", "Market"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(customerListJTable);

        addNewCustomerJButton.setText("Add New Customer >>");
        addNewCustomerJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewCustomerJButtonActionPerformed(evt);
            }
        });

        viewCustomerJButton.setText("View Customer >>");
        viewCustomerJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCustomerJButtonActionPerformed(evt);
            }
        });

        deleteUserJButton.setText("Delete Customer");
        deleteUserJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(119, 119, 119)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addNewCustomerJButton)
                                .addGap(294, 294, 294)
                                .addComponent(viewCustomerJButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteUserJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteUserJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewCustomerJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(viewCustomerJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addContainerGap(182, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void addNewCustomerJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewCustomerJButtonActionPerformed
        // TODO add your handling code here:
        AddNewCustomerJPanel panel = new AddNewCustomerJPanel(userProcessContainer, customerDirectory, userAccountDirectory, marketList);
        userProcessContainer.add("AddNewCustomerJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_addNewCustomerJButtonActionPerformed

    private void viewCustomerJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCustomerJButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = customerListJTable.getSelectedRow();

        if(selectedrow >= 0){
            Customer customer = (Customer)customerListJTable.getValueAt(selectedrow,0);
            UserAccount user = (UserAccount)customerListJTable.getValueAt(selectedrow, 1);
            
            ViewCustomerJPanel panel = new ViewCustomerJPanel(userProcessContainer, customer, user);
            userProcessContainer.add("ViewCustomerJPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else{JOptionPane.showMessageDialog(null,"Please Select a Row ");}

    }//GEN-LAST:event_viewCustomerJButtonActionPerformed

    private void deleteUserJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserJButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = customerListJTable.getSelectedRow();

        if(selectedrow >= 0){

            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to delete this Customer account ?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION){
                Customer customer = (Customer)customerListJTable.getValueAt(selectedrow,0);
                UserAccount user = (UserAccount)customerListJTable.getValueAt(selectedrow, 1);
                userAccountDirectory.getUserList().remove(user);
                customerDirectory.getCustomerList().remove(customer);
                    
                populateData();
            }
        }
        else{JOptionPane.showMessageDialog(null,"Please Select a Row ");}
    }//GEN-LAST:event_deleteUserJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewCustomerJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable customerListJTable;
    private javax.swing.JButton deleteUserJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton viewCustomerJButton;
    // End of variables declaration//GEN-END:variables
}
