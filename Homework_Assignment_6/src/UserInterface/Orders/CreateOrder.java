/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Orders;

import Business.Business;
import Business.Customers.Customer;
import Business.Customers.CustomerDirectory;
import Business.Markets.MarketOffer;
import Business.Markets.MarketOfferCatalog;
import Business.OrderCatalogs.MasterOrderCatalog;
import Business.OrderCatalogs.Order;
import Business.OrderCatalogs.OrderItem;
import Business.SalesPerson.SalesPerson;
import Business.Supplier.Product;
import Business.Supplier.Supplier;
import UserInterface.SalesPersonRole.SalesPersonOrderJPanel;
import UserInterface.SupplierRole.ViewProductDetailJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Varun
 */
public class CreateOrder extends javax.swing.JPanel {

    /**
     * Creates new form CreateOrder
     */
    private JPanel userProcessContainer;
    private Business business;
    private SalesPerson salesPerson;
    private Order order;
    private boolean isCheckedOut = false;
    private Customer customer;
    
    public CreateOrder(JPanel userProcessContainer,Business business,SalesPerson salesPerson) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        
        //this.salesPerson = salesPerson;
        populateCustomerCombo();
        //customer = (Customer)customerComboBox.getSelectedItem();
        
//        if (customer!=null) {
//            populateTable();
//        }
        if (isCheckedOut) {
            
        }
        this.salesPerson = salesPerson;
        order = new Order();
    }


    
    public void populateCustomerCombo(){
        customerComboBox.removeAllItems();
        for (Customer c:business.getCustomerDirectory().getCustomerList()) {
            customerComboBox.addItem(c);
        }
    }
    
    public void populateTable() {
        int rowCount = tblProductCatalog.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tblProductCatalog.getModel();
        model.setRowCount(0);
        
        MarketOfferCatalog marketOfferCatalog = customer.getMarket().getMarketOfferCatalog();
        for(MarketOffer m : marketOfferCatalog.getMarketOfferList()) {
            Object row[] = new Object[6];
            row[0] = m;
            row[1] = m.getProduct().getProductModelNumber();
            row[2] = m.getCeilingPrice();//ceiling price
            row[3] = m.getTargetPrice();//target price
            row[4] = m.getFloorPrice();//floor price
            row[5] = m.getProduct().getAvailability();
            model.addRow(row);
        }
    }
    
    private void salesPersonCommission(){
        int fixedComponent =0;
        int bonusComponent =0;
        int penaltyComponent =0;
        int totalComponent =0;
        for(OrderItem orderItem: order.getOrderItemList())
        {   fixedComponent+=orderItem.getMarketOffer().getTargetPrice()*0.05*(orderItem.getQuantity());
            if(orderItem.getSellingPrice()>=orderItem.getMarketOffer().getTargetPrice()){
            bonusComponent+=((orderItem.getSellingPrice())-(orderItem.getMarketOffer().getTargetPrice()))*0.1*(orderItem.getQuantity());
            }
            else if(orderItem.getSellingPrice()<orderItem.getMarketOffer().getTargetPrice()){
            penaltyComponent+=(orderItem.getMarketOffer().getTargetPrice()-orderItem.getSellingPrice())*0.1*(orderItem.getQuantity());
            }
        }
        totalComponent=((fixedComponent+bonusComponent)-penaltyComponent);
        fixedComponentJTextField.setText(String.valueOf(fixedComponent));
        bonusComponentJTextField.setText(String.valueOf(bonusComponent));
        penaltyComponentJTextField.setText(String.valueOf(penaltyComponent));
        totalComponentJTextField.setText(String.valueOf(totalComponent));
        
        totalComponentJTextField.setEnabled(false);
        penaltyComponentJTextField.setEnabled(false);
        bonusComponentJTextField.setEnabled(false);
        fixedComponentJTextField.setEnabled(false);
    
    
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customerComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtProductIdSearch = new javax.swing.JTextField();
        btnSearchProduct = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        btnViewProduct = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fixedComponentJTextField = new javax.swing.JTextField();
        spinnerQuantity = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        btnAddToCart = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        btnViewProductDetail = new javax.swing.JButton();
        txtModifyQuantity = new javax.swing.JTextField();
        btnModifyQuantity = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtSellingPrice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        bonusComponentJTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        penaltyComponentJTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        totalComponentJTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();

        setLayout(null);

        customerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        customerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerComboBoxActionPerformed(evt);
            }
        });
        add(customerComboBox);
        customerComboBox.setBounds(56, 97, 160, 31);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Create a new Order");
        add(jLabel1);
        jLabel1.setBounds(30, 20, 800, 43);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Customer");
        add(jLabel2);
        jLabel2.setBounds(56, 65, 160, 26);

        txtProductIdSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductIdSearchActionPerformed(evt);
            }
        });
        add(txtProductIdSearch);
        txtProductIdSearch.setBounds(430, 150, 130, 30);

        btnSearchProduct.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchProduct.setText("Search by Product Id");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });
        add(btnSearchProduct);
        btnSearchProduct.setBounds(590, 150, 170, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Product Catalog");
        add(jLabel3);
        jLabel3.setBounds(60, 160, 160, 30);

        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Product ID", "Ceiling Price", "Target Price", "Floor Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductCatalog);

        add(jScrollPane1);
        jScrollPane1.setBounds(50, 200, 710, 110);

        btnViewProduct.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnViewProduct.setText("View Item");
        btnViewProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewProductActionPerformed(evt);
            }
        });
        add(btnViewProduct);
        btnViewProduct.setBounds(50, 620, 160, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Sale Price");
        add(jLabel4);
        jLabel4.setBounds(260, 330, 80, 30);

        fixedComponentJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixedComponentJTextFieldActionPerformed(evt);
            }
        });
        add(fixedComponentJTextField);
        fixedComponentJTextField.setBounds(280, 410, 110, 30);

        spinnerQuantity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinnerQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        add(spinnerQuantity);
        spinnerQuantity.setBounds(550, 330, 60, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Quantity");
        add(jLabel5);
        jLabel5.setBounds(480, 330, 70, 30);

        btnAddToCart.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });
        add(btnAddToCart);
        btnAddToCart.setBounds(630, 330, 130, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Customer's Cart");
        add(jLabel6);
        jLabel6.setBounds(50, 450, 160, 30);

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCart);

        add(jScrollPane2);
        jScrollPane2.setBounds(50, 490, 720, 114);

        btnViewProductDetail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnViewProductDetail.setText("View Product Detail");
        btnViewProductDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewProductDetailActionPerformed(evt);
            }
        });
        add(btnViewProductDetail);
        btnViewProductDetail.setBounds(60, 330, 160, 30);

        txtModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModifyQuantityActionPerformed(evt);
            }
        });
        add(txtModifyQuantity);
        txtModifyQuantity.setBounds(250, 620, 101, 28);

        btnModifyQuantity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });
        add(btnModifyQuantity);
        btnModifyQuantity.setBounds(360, 620, 158, 32);

        btnCheckout.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });
        add(btnCheckout);
        btnCheckout.setBounds(570, 620, 115, 32);

        btnRemove.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        add(btnRemove);
        btnRemove.setBounds(700, 620, 100, 32);

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(20, 390, 73, 31);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Your Commission:");
        add(jLabel7);
        jLabel7.setBounds(130, 410, 150, 30);

        txtSellingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSellingPriceActionPerformed(evt);
            }
        });
        add(txtSellingPrice);
        txtSellingPrice.setBounds(330, 330, 110, 30);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Fixed");
        add(jLabel8);
        jLabel8.setBounds(290, 390, 90, 14);

        bonusComponentJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bonusComponentJTextFieldActionPerformed(evt);
            }
        });
        add(bonusComponentJTextField);
        bonusComponentJTextField.setBounds(420, 410, 90, 30);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Bonus");
        add(jLabel9);
        jLabel9.setBounds(420, 390, 90, 14);

        penaltyComponentJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penaltyComponentJTextFieldActionPerformed(evt);
            }
        });
        add(penaltyComponentJTextField);
        penaltyComponentJTextField.setBounds(530, 410, 90, 30);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Penalty");
        add(jLabel10);
        jLabel10.setBounds(530, 390, 90, 14);

        totalComponentJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalComponentJTextFieldActionPerformed(evt);
            }
        });
        add(totalComponentJTextField);
        totalComponentJTextField.setBounds(650, 410, 90, 30);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Total");
        add(jLabel11);
        jLabel11.setBounds(650, 390, 80, 14);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("=");
        add(jLabel12);
        jLabel12.setBounds(620, 420, 30, 14);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("+");
        add(jLabel13);
        jLabel13.setBounds(390, 420, 30, 14);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("-");
        add(jLabel14);
        jLabel14.setBounds(510, 420, 20, 14);
    }// </editor-fold>//GEN-END:initComponents

    private void txtProductIdSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductIdSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductIdSearchActionPerformed

    private void txtModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModifyQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModifyQuantityActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
        try{
        int selectedRow = tblProductCatalog.getSelectedRow();
        if (selectedRow<0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            
        }
        else{
            int j=0;
            MarketOffer marketOffer = (MarketOffer)tblProductCatalog.getValueAt(selectedRow,0);
            int quantity = (Integer) spinnerQuantity.getValue();
            if (quantity <= 0) {
                JOptionPane.showMessageDialog(null, "Please select a quantity greater than zero");
                j++;
                return;

            }
            
            int salesPrice = Integer.parseInt(txtSellingPrice.getText());

            if (salesPrice < marketOffer.getFloorPrice()) {
                JOptionPane.showMessageDialog(null, "Product cannot be sold below floor price");
                j++;
            }
            else if (salesPrice > marketOffer.getCeilingPrice()) {
                JOptionPane.showMessageDialog(null, "Product cannot be sold above ceiling price");
                j++;
            }
            else{
            if ((quantity <= marketOffer.getProduct().getAvailability())&(j==0)) {
                boolean alreadyPresent = false;
                for(OrderItem oi: order.getOrderItemList()){
                    if (oi.getMarketOffer().getProduct() == marketOffer.getProduct()) {
                        int oldAvail = marketOffer.getProduct().getAvailability();
                        int newAvail = oldAvail - quantity;
                        marketOffer.getProduct().setAvailability(newAvail);
                        oi.setQuantity(quantity+oi.getQuantity());
                        oi.setSellingPrice(salesPrice);
                        alreadyPresent = true;
                        cartTable();
                        salesPersonCommission();
                    }
                }
                if(!alreadyPresent){
                    int oldAvail = marketOffer.getProduct().getAvailability();
                    int newAvail = oldAvail - quantity;
                    marketOffer.getProduct().setAvailability(newAvail);
                    order.addOrderItem(marketOffer, quantity, salesPrice);
                    populateTable();
                    cartTable();
                    salesPersonCommission();
                }
                
            }
            else{
                JOptionPane.showMessageDialog(null,"Quantity is greater than availability");
            }
        }
        }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter a valid number for Selling price");
        }
        
    }//GEN-LAST:event_btnAddToCartActionPerformed

    public void cartTable() {
        int rowCount = tblProductCatalog.getRowCount();
        DefaultTableModel model = (DefaultTableModel)tblCart.getModel();
        model.setRowCount(0);
        for(OrderItem oi : order.getOrderItemList()) {
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getSellingPrice();
            row[2] = oi.getQuantity();
            row[3] = oi.getSellingPrice() * oi.getQuantity();
            model.addRow(row);
        }
    }
    
    
    private void customerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerComboBoxActionPerformed
        // TODO add your handling code here:
    customer = (Customer)customerComboBox.getSelectedItem();
        if (customer!=null) {
            populateTable();
        
        }
    }//GEN-LAST:event_customerComboBoxActionPerformed

    private void btnViewProductDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewProductDetailActionPerformed
        // TODO add your handling code here:
        int row = tblProductCatalog.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        MarketOffer marketOffer = (MarketOffer)tblProductCatalog.getValueAt(row, 0);
        ViewProductJPanel panel = new ViewProductJPanel(userProcessContainer, marketOffer.getProduct());
        userProcessContainer.add("ViewProductDetailJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewProductDetailActionPerformed

    private void fixedComponentJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixedComponentJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fixedComponentJTextFieldActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SalesPersonOrderJPanel salesPersonOrderJPanel = (SalesPersonOrderJPanel) component;
        salesPersonOrderJPanel.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCart.getSelectedRow();
        if (selectedRow < 0 ) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        else{
        OrderItem oi = (OrderItem)tblCart.getValueAt(selectedRow, 0);
        int currentAvail = oi.getMarketOffer().getProduct().getAvailability();
        int oldQuantity = oi.getQuantity();
        int newQuantity = Integer.parseInt(txtModifyQuantity.getText());
        if (newQuantity > (currentAvail + oldQuantity)) {
            JOptionPane.showMessageDialog(null,"Quantity is more than availability");
            return;
        }
        else{
            if (newQuantity <= 0 ) {
                JOptionPane.showMessageDialog(null,"Quantity should be more than zero");
                return;
            }
            oi.setQuantity(newQuantity);
            oi.getMarketOffer().getProduct().setAvailability(currentAvail + (oldQuantity - newQuantity));
            populateTable();
            cartTable();
            salesPersonCommission();
        }
        }
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnViewProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewProductActionPerformed
        // TODO add your handling code here:
        int row = tblCart.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        OrderItem orderItem = (OrderItem)tblCart.getValueAt(row, 0);
        ViewProductJPanel panel = new ViewProductJPanel(userProcessContainer, orderItem.getMarketOffer().getProduct());
        userProcessContainer.add("ViewProductDetailJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewProductActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        
        if (order.getOrderItemList().size() > 0) {
            order.setCustomer(customer);
            order.setSalesPerson(salesPerson);
            business.getMasterOrderCatalog().addOrder(order);
            
            order.setOrderCommission(Double.parseDouble(totalComponentJTextField.getText()));
            order.getSalesPerson().setTotalSalesCommission(Double.parseDouble(totalComponentJTextField.getText()));
            
            JOptionPane.showMessageDialog(null, "Order placed successfully");
            order = new Order();
            populateTable();
            //cartTable();
            isCheckedOut = true;
            DefaultTableModel model = (DefaultTableModel)tblCart.getModel();
            model.setRowCount(0);
            
            
        }
        else{
            JOptionPane.showMessageDialog(null, "No order placed");
            return;
        }
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int row = tblCart.getSelectedRow();
        if (row<0) {
            JOptionPane.showMessageDialog(null, "Select a row");
        }
        OrderItem oi = (OrderItem) tblCart.getValueAt(row, 0);
        int oldAvail = oi.getMarketOffer().getProduct().getAvailability();
        int newQuantity =  oldAvail + oi.getQuantity() ;
        oi.getMarketOffer().getProduct().setAvailability(newQuantity);
        order.removeOrderItem(oi);
        JOptionPane.showMessageDialog(null, "Order Item removed");
        populateTable();
        cartTable();
        salesPersonCommission();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        // TODO add your handling code here:
        MarketOfferCatalog marketOfferCatalog = customer.getMarket().getMarketOfferCatalog();
        int i =0, j=0;
        try{
        int productId = Integer.parseInt(txtProductIdSearch.getText());
        for(MarketOffer m : marketOfferCatalog.getMarketOfferList()) {
        if(m.getProduct().getProductModelNumber()== productId)
        {tblProductCatalog.setRowSelectionInterval(i, i);
        JOptionPane.showMessageDialog(null, "Corresponding row with product Id "+ productId+" is highlighted in the table.");
        j=1;
        break;}
        i++;
        }
        if(j==0){
            JOptionPane.showMessageDialog(null, "No results found for the following product id");
        }
        
        }catch(NumberFormatException e){
        JOptionPane.showMessageDialog(null, "Please enter a valid Porduct id");
        }
        
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void txtSellingPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSellingPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSellingPriceActionPerformed

    private void bonusComponentJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bonusComponentJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bonusComponentJTextFieldActionPerformed

    private void penaltyComponentJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_penaltyComponentJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_penaltyComponentJTextFieldActionPerformed

    private void totalComponentJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalComponentJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalComponentJTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bonusComponentJTextField;
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JButton btnViewProduct;
    private javax.swing.JButton btnViewProductDetail;
    private javax.swing.JComboBox customerComboBox;
    private javax.swing.JTextField fixedComponentJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField penaltyComponentJTextField;
    private javax.swing.JSpinner spinnerQuantity;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProductCatalog;
    private javax.swing.JTextField totalComponentJTextField;
    private javax.swing.JTextField txtModifyQuantity;
    private javax.swing.JTextField txtProductIdSearch;
    private javax.swing.JTextField txtSellingPrice;
    // End of variables declaration//GEN-END:variables

}
